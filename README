							             README
							             ======
							
				               gcd-service API 0.0.2 release
	    		-------------------------------------------------------------
	    		
Welcome to the gcd-service API 0.0.2 release!  This release includes versions of the 
gcd-service API implementation.

JDK Version notes
=============================================================================================

The gcd-service API supports JDK 1.8 or higher and Maven 3.0 or higher.  Note that I have currently tested this 
implementation with JDK 1.8

To RUN 
==============================================================================================

		0. Latest version of the code available at the 
		
			Fetch URL: https://github.com/sidath80/unicotest.git
  			Push  URL: https://github.com/sidath80/unicotest.git
  			HEAD branch: master
  			Remote branch: master tracked
  			
		1. To build the service : type "mvn clean package" in pom directory.
		
		2. Once you build it, It will run the sample tests which are in the (/gcd-service/src/test/java)
		   
		3. To run the service (both REST/WSDL) : type "java -jar target\gcd-service-0.0.2-SNAPSHOT.jar"
		   It will automatically start the jms Q with inthe server (Spring boot & JMS Q)
		
		4. Once the service is running , you can access the swagger api via "http://localhost:8080/swagger-ui.html"
		
		5. Mysql database connection details : (/gcd-service/src/main/resources/application.properties)
		
		                                      url=jdbc:mysql://localhost/dbtest
                                              username=test
                                              password=password
                                              
           Sample data will be insert into the database automatically. {10,20,30,40}
		
		6. Sample request xml is /gcd-service/get-gcd-request.xml, you have to pass default parameter name as test for all request
		   i:e You can use curl --header "content-type: text/xml" -d @get-gcd-request.xml http://localhost:8080/ws or SOAP interface
			

Production Deployment
==============================================================================================	
This is plan to use AWS cloud environment with AWS elastic beanstalk which is support auto scaling according to the number of request.
	

		
		